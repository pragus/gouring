// Code generated by cmd/cgo -godefs; DO NOT EDIT.
// cgo -godefs ../cgo_wrappers.go

package uring

import (
	"unsafe"
)

const (
	Cgo_IOSQE_FIXED_FILE = 0x1
	Cgo_IOSQE_IO_DRAIN   = 0x2
	Cgo_IOSQE_IO_LINK    = 0x4
)

const (
	Cgo_IORING_SETUP_IOPOLL = 0x1
	Cgo_IORING_SETUP_SQPOLL = 0x2
	Cgo_IORING_SETUP_SQ_AFF = 0x4
	Cgo_IORING_SETUP_CQSIZE = 0x8
)

const (
	Cgo_IORING_OP_NOP             = 0x0
	Cgo_IORING_OP_READV           = 0x1
	Cgo_IORING_OP_WRITEV          = 0x2
	Cgo_IORING_OP_FSYNC           = 0x3
	Cgo_IORING_OP_READ_FIXED      = 0x4
	Cgo_IORING_OP_WRITE_FIXED     = 0x5
	Cgo_IORING_OP_POLL_ADD        = 0x6
	Cgo_IORING_OP_POLL_REMOVE     = 0x7
	Cgo_IORING_OP_SYNC_FILE_RANGE = 0x8
	Cgo_IORING_OP_SENDMSG         = 0x9
	Cgo_IORING_OP_RECVMSG         = 0xa
	Cgo_IORING_OP_TIMEOUT         = 0xb
	Cgo_IORING_OP_TIMEOUT_REMOVE  = 0xc
	Cgo_IORING_OP_ACCEPT          = 0xd
	Cgo_IORING_OP_ASYNC_CANCEL    = 0xe
	Cgo_IORING_OP_LINK_TIMEOUT    = 0xf
)

const (
	Cgo_IORING_FSYNC_DATASYNC = 0x1
)

const (
	Cgo_IORING_TIMEOUT_ABS = 0x1
)

const (
	Cgo_IORING_OFF_SQ_RING = 0x0
	Cgo_IORING_OFF_CQ_RING = 0x8000000
	Cgo_IORING_OFF_SQES    = 0x10000000
)

type Cgo_io_uring_sq struct {
	Khead         *uint32
	Ktail         *uint32
	Kring_mask    *uint32
	Kring_entries *uint32
	Kflags        *uint32
	Kdropped      *uint32
	Array         *uint32
	Sqes          *Cgo_io_uring_sqe
	Sqe_head      uint32
	Sqe_tail      uint32
	Ring_sz       uint64
	Ring_ptr      *byte
}
type Cgo_io_uring_cq struct {
	Khead         *uint32
	Ktail         *uint32
	Kring_mask    *uint32
	Kring_entries *uint32
	Koverflow     *uint32
	Cqes          *Cgo_io_uring_cqe
	Ring_sz       uint64
	Ring_ptr      *byte
}

type Cgo_io_uring_sqe struct {
	Opcode    uint8
	Flags     uint8
	Ioprio    uint16
	Fd        int32
	Off       uint64
	Addr      uint64
	Len       uint32
	Rw_flags  int32
	User_data uint64
	Buf_index uint16
	Pad_cgo_0 [22]byte
}
type Cgo_io_uring_cqe struct {
	Data  uint64
	Res   int32
	Flags uint32
}

type Cgo_io_sqring_offsets struct {
	Head    uint32
	Tail    uint32
	Mask    uint32
	Entries uint32
	Flags   uint32
	Dropped uint32
	Array   uint32
	Resv1   uint32
	Resv2   uint64
}
type Cgo_io_cqring_offsets struct {
	Head     uint32
	Tail     uint32
	Mask     uint32
	Entries  uint32
	Overflow uint32
	Cqes     uint32
	Resv     [2]uint64
}

type Cgo_io_uring_params struct {
	Sq_entries     uint32
	Cq_entries     uint32
	Flags          uint32
	Sq_thread_cpu  uint32
	Sq_thread_idle uint32
	Features       uint32
	Resv           [4]uint32
	Sq_off         Cgo_io_sqring_offsets
	Cq_off         Cgo_io_cqring_offsets
}

const (
	Cgo_IORING_SQ_NEED_WAKEUP = 0x1
)

const (
	Cgo_IORING_ENTER_GETEVENTS = 0x1
	Cgo_IORING_ENTER_SQ_WAKEUP = 0x2
)

const (
	Cgo_IORING_REGISTER_BUFFERS      = 0x0
	Cgo_IORING_UNREGISTER_BUFFERS    = 0x1
	Cgo_IORING_REGISTER_FILES        = 0x2
	Cgo_IORING_UNREGISTER_FILES      = 0x3
	Cgo_IORING_REGISTER_EVENTFD      = 0x4
	Cgo_IORING_UNREGISTER_EVENTFD    = 0x5
	Cgo_IORING_REGISTER_FILES_UPDATE = 0x6
)

type Cgo_io_uring_files_update struct {
	Offset uint32
	Fds    *int32
}

func cgo_io_uring_setup(entries uint, params *Params) int {
	cgoEntries := uint32(entries)
	cgoParams := (*struct {
		Sq_entries     uint32
		Cq_entries     uint32
		Flags          uint32
		Sq_thread_cpu  uint32
		Sq_thread_idle uint32
		Features       uint32
		Resv           [4]uint32
		Sq_off         Cgo_io_sqring_offsets
		Cq_off         Cgo_io_cqring_offsets
	})(unsafe.Pointer(params))
	res := _Cfunc_io_uring_setup(cgoEntries, cgoParams)
	return int(res)
}

func cgo_io_uring_queue_mmap(r *Uring, fd int, params *Params) int {
	cgoFd := int32(fd)
	cgoParams := (*struct {
		Sq_entries     uint32
		Cq_entries     uint32
		Flags          uint32
		Sq_thread_cpu  uint32
		Sq_thread_idle uint32
		Features       uint32
		Resv           [4]uint32
		Sq_off         Cgo_io_sqring_offsets
		Cq_off         Cgo_io_cqring_offsets
	})(unsafe.Pointer(params))
	cgoRing := (*struct {
		Sq    Cgo_io_uring_sq
		Cq    Cgo_io_uring_cq
		Flags uint32
		Fd    int32
	})(unsafe.Pointer(r))
	res := _Cfunc_io_uring_queue_mmap(cgoFd, cgoParams, cgoRing)
	return int(res)

}

func cgo_io_uring_queue_init(r *Uring, entries, flags uint) int {
	cgoRing := (*struct {
		Sq    Cgo_io_uring_sq
		Cq    Cgo_io_uring_cq
		Flags uint32
		Fd    int32
	})(unsafe.Pointer(r))
	cgoEntries := uint32(entries)
	cgoFlags := uint32(flags)
	res := _Cfunc_io_uring_queue_init(cgoEntries, cgoRing, cgoFlags)
	return int(res)
}

func cgo_io_uring_queue_exit(r *Uring) {
	cgoRing := (*struct {
		Sq    Cgo_io_uring_sq
		Cq    Cgo_io_uring_cq
		Flags uint32
		Fd    int32
	})(unsafe.Pointer(r))
	_Cfunc_io_uring_queue_exit(cgoRing)
}

func cgo_io_uring_submit(r *Uring) int {
	cgoRing := (*struct {
		Sq    Cgo_io_uring_sq
		Cq    Cgo_io_uring_cq
		Flags uint32
		Fd    int32
	})(unsafe.Pointer(r))
	res := _Cfunc_io_uring_submit(cgoRing)
	return int(res)
}

func cgo_io_uring_wait_cqe(r *Uring, p unsafe.Pointer) int {
	cgoRing := (*struct {
		Sq    Cgo_io_uring_sq
		Cq    Cgo_io_uring_cq
		Flags uint32
		Fd    int32
	})(unsafe.Pointer(r))
	cgoCqePtr := (**struct {
		Data  uint64
		Res   int32
		Flags uint32
	})(p)
	res := _Cfunc_io_uring_wait_cqe(cgoRing, cgoCqePtr)
	return int(res)
}

func cgo_io_uring_prep_nop(sqe *IoUringSqe) {
	cgoSqe := (*struct {
		Opcode    uint8
		Flags     uint8
		Ioprio    uint16
		Fd        int32
		Off       uint64
		Addr      uint64
		Len       uint32
		Rw_flags  int32
		User_data uint64
		Buf_index uint16
		Pad_cgo_0 [22]byte
	})(unsafe.Pointer(sqe))
	_Cfunc_io_uring_prep_nop(cgoSqe)
}

func cgo_io_uring_get_sqe(r *Uring) *IoUringSqe {
	cgoRing := (*struct {
		Sq    Cgo_io_uring_sq
		Cq    Cgo_io_uring_cq
		Flags uint32
		Fd    int32
	})(unsafe.Pointer(r))
	cgoSqe := unsafe.Pointer(_Cfunc_io_uring_get_sqe(cgoRing))
	return (*IoUringSqe)(cgoSqe)
}
